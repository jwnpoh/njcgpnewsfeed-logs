package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"regexp"
	"sort"
	"strings"
  "github.com/olekukonko/tablewriter"
)

func main() {
  file := os.Args[1]
	data, err := os.Open(file)
	if err != nil {
		log.Fatal(err)
	}
	defer data.Close()

	bytes, err := io.ReadAll(data)
	if err != nil {
		log.Fatal(err)
	}

	var logs []AutoGenerated
	err = json.Unmarshal(bytes, &logs)

	stats, err := countStats(logs)

	sortedStats := sortMap(stats)

  printTable(sortedStats)
}

func countStats(logs []AutoGenerated) (map[string]int, error) {
	stats := make(map[string]int)

	for _, i := range logs {
		term := strings.TrimPrefix(i.ProtoPayload.Resource, "/search?term=")
    term = strings.TrimSpace(term)
    elim := regexp.MustCompile(`\d{4}`)
    if elim.MatchString(term) {
      continue
    }
		term = strings.ReplaceAll(term, "%20", " ")
		term = strings.ReplaceAll(term, "+", " ")
    term = strings.ToLower(term)
		stats[term] += 1
	}

	return stats, nil
}

type sortItem struct {
  key string
  value int
}

type sorted []sortItem

func (s sorted) Len() int           { return len(s) }
func (s sorted) Less(i, j int) bool { return s[i].value < s[j].value }
func (s sorted) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }

func sortMap(statsMap map[string]int) sorted {
  sorting := make(sorted, 0)

	for k, v := range statsMap {
    sorting = append(sorting, sortItem{k, v})
	}

  sort.Sort(sort.Reverse(sorting))

	return sorting
}

func printTable(sortedStats []sortItem){
  table := tablewriter.NewWriter(os.Stdout)
  table.SetHeader([]string{"Term", "Count"})

	for _, v := range sortedStats {
    table.Append([]string{strings.Title(v.key), fmt.Sprint(v.value)})
	}
  table.Render()
}

